// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: FestivalProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protobuffprotocol {

  /// <summary>Holder for reflection information generated from FestivalProtocol.proto</summary>
  public static partial class FestivalProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for FestivalProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FestivalProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZGZXN0aXZhbFByb3RvY29sLnByb3RvEhFwcm90b2J1ZmZwcm90b2NvbCI7",
            "CgdBY2NvdW50EhAKCHBhc3N3b3JkGAEgASgJEhAKCHVzZXJuYW1lGAIgASgJ",
            "EgwKBG5hbWUYAyABKAkicQoLRmVzdGl2YWxEVE8SEgoKZmVzdGl2YWxJRBgB",
            "IAEoAxIMCgRuYW1lGAIgASgJEgwKBGRhdGUYAyABKAkSEAoIbG9jYXRpb24Y",
            "BCABKAkSDQoFc2VhdHMYBSABKAMSEQoJc29sZFNlYXRzGAYgASgDIj4KCVRp",
            "Y2tldERUTxISCgpmZXN0aXZhbElEGAEgASgFEg0KBXNlYXRzGAIgASgDEg4K",
            "BmNsaWVudBgDIAEoCSKeAgoHUmVxdWVzdBItCgR0eXBlGAEgASgOMh8ucHJv",
            "dG9idWZmcHJvdG9jb2wuUmVxdWVzdC5UeXBlEigKBHVzZXIYAiABKAsyGi5w",
            "cm90b2J1ZmZwcm90b2NvbC5BY2NvdW50EjEKCWZlc3RpdmFscxgDIAMoCzIe",
            "LnByb3RvYnVmZnByb3RvY29sLkZlc3RpdmFsRFRPEgwKBGRhdGUYBCABKAkS",
            "LAoGdGlja2V0GAUgASgLMhwucHJvdG9idWZmcHJvdG9jb2wuVGlja2V0RFRP",
            "IksKBFR5cGUSCgoGVW5rb3duEAASCQoFTG9naW4QARIKCgZMb2dvdXQQAhIQ",
            "CgxTZWFyY2hCeURhdGUQAxIOCgpTZWxsVGlja2V0EAQitAIKCFJlc3BvbnNl",
            "Ei4KBHR5cGUYASABKA4yIC5wcm90b2J1ZmZwcm90b2NvbC5SZXNwb25zZS5U",
            "eXBlEg0KBWVycm9yGAIgASgJEigKBHVzZXIYAyABKAsyGi5wcm90b2J1ZmZw",
            "cm90b2NvbC5BY2NvdW50EjEKCWZlc3RpdmFscxgEIAMoCzIeLnByb3RvYnVm",
            "ZnByb3RvY29sLkZlc3RpdmFsRFRPEiwKBnRpY2tldBgFIAEoCzIcLnByb3Rv",
            "YnVmZnByb3RvY29sLlRpY2tldERUTyJeCgRUeXBlEgoKBlVua293bhAAEgkK",
            "BUxvZ2luEAESCgoGTG9nb3V0EAISEAoMU2VhcmNoQnlEYXRlEAMSDgoKU2Vs",
            "bFRpY2tldBAEEgYKAk9rEAUSCQoFRXJyb3IQBmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuffprotocol.Account), global::Protobuffprotocol.Account.Parser, new[]{ "Password", "Username", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuffprotocol.FestivalDTO), global::Protobuffprotocol.FestivalDTO.Parser, new[]{ "FestivalID", "Name", "Date", "Location", "Seats", "SoldSeats" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuffprotocol.TicketDTO), global::Protobuffprotocol.TicketDTO.Parser, new[]{ "FestivalID", "Seats", "Client" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuffprotocol.Request), global::Protobuffprotocol.Request.Parser, new[]{ "Type", "User", "Festivals", "Date", "Ticket" }, null, new[]{ typeof(global::Protobuffprotocol.Request.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuffprotocol.Response), global::Protobuffprotocol.Response.Parser, new[]{ "Type", "Error", "User", "Festivals", "Ticket" }, null, new[]{ typeof(global::Protobuffprotocol.Response.Types.Type) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Account : pb::IMessage<Account>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuffprotocol.FestivalProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      password_ = other.password_;
      username_ = other.username_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 1;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Password != other.Password) return false;
      if (Username != other.Username) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Password.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Password);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Password.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Password);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Password = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Password = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FestivalDTO : pb::IMessage<FestivalDTO>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FestivalDTO> _parser = new pb::MessageParser<FestivalDTO>(() => new FestivalDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FestivalDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuffprotocol.FestivalProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalDTO(FestivalDTO other) : this() {
      festivalID_ = other.festivalID_;
      name_ = other.name_;
      date_ = other.date_;
      location_ = other.location_;
      seats_ = other.seats_;
      soldSeats_ = other.soldSeats_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FestivalDTO Clone() {
      return new FestivalDTO(this);
    }

    /// <summary>Field number for the "festivalID" field.</summary>
    public const int FestivalIDFieldNumber = 1;
    private long festivalID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FestivalID {
      get { return festivalID_; }
      set {
        festivalID_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 3;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 4;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seats" field.</summary>
    public const int SeatsFieldNumber = 5;
    private long seats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seats {
      get { return seats_; }
      set {
        seats_ = value;
      }
    }

    /// <summary>Field number for the "soldSeats" field.</summary>
    public const int SoldSeatsFieldNumber = 6;
    private long soldSeats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoldSeats {
      get { return soldSeats_; }
      set {
        soldSeats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FestivalDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FestivalDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FestivalID != other.FestivalID) return false;
      if (Name != other.Name) return false;
      if (Date != other.Date) return false;
      if (Location != other.Location) return false;
      if (Seats != other.Seats) return false;
      if (SoldSeats != other.SoldSeats) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FestivalID != 0L) hash ^= FestivalID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Seats != 0L) hash ^= Seats.GetHashCode();
      if (SoldSeats != 0L) hash ^= SoldSeats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FestivalID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FestivalID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Date);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Location);
      }
      if (Seats != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Seats);
      }
      if (SoldSeats != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SoldSeats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FestivalID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FestivalID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Date);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Location);
      }
      if (Seats != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Seats);
      }
      if (SoldSeats != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SoldSeats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FestivalID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FestivalID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Seats != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seats);
      }
      if (SoldSeats != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoldSeats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FestivalDTO other) {
      if (other == null) {
        return;
      }
      if (other.FestivalID != 0L) {
        FestivalID = other.FestivalID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Seats != 0L) {
        Seats = other.Seats;
      }
      if (other.SoldSeats != 0L) {
        SoldSeats = other.SoldSeats;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FestivalID = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Date = input.ReadString();
            break;
          }
          case 34: {
            Location = input.ReadString();
            break;
          }
          case 40: {
            Seats = input.ReadInt64();
            break;
          }
          case 48: {
            SoldSeats = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FestivalID = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Date = input.ReadString();
            break;
          }
          case 34: {
            Location = input.ReadString();
            break;
          }
          case 40: {
            Seats = input.ReadInt64();
            break;
          }
          case 48: {
            SoldSeats = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TicketDTO : pb::IMessage<TicketDTO>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TicketDTO> _parser = new pb::MessageParser<TicketDTO>(() => new TicketDTO());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketDTO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuffprotocol.FestivalProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketDTO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketDTO(TicketDTO other) : this() {
      festivalID_ = other.festivalID_;
      seats_ = other.seats_;
      client_ = other.client_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketDTO Clone() {
      return new TicketDTO(this);
    }

    /// <summary>Field number for the "festivalID" field.</summary>
    public const int FestivalIDFieldNumber = 1;
    private int festivalID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FestivalID {
      get { return festivalID_; }
      set {
        festivalID_ = value;
      }
    }

    /// <summary>Field number for the "seats" field.</summary>
    public const int SeatsFieldNumber = 2;
    private long seats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seats {
      get { return seats_; }
      set {
        seats_ = value;
      }
    }

    /// <summary>Field number for the "client" field.</summary>
    public const int ClientFieldNumber = 3;
    private string client_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Client {
      get { return client_; }
      set {
        client_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketDTO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketDTO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FestivalID != other.FestivalID) return false;
      if (Seats != other.Seats) return false;
      if (Client != other.Client) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FestivalID != 0) hash ^= FestivalID.GetHashCode();
      if (Seats != 0L) hash ^= Seats.GetHashCode();
      if (Client.Length != 0) hash ^= Client.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FestivalID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FestivalID);
      }
      if (Seats != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Seats);
      }
      if (Client.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Client);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FestivalID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FestivalID);
      }
      if (Seats != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Seats);
      }
      if (Client.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Client);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FestivalID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FestivalID);
      }
      if (Seats != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seats);
      }
      if (Client.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Client);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketDTO other) {
      if (other == null) {
        return;
      }
      if (other.FestivalID != 0) {
        FestivalID = other.FestivalID;
      }
      if (other.Seats != 0L) {
        Seats = other.Seats;
      }
      if (other.Client.Length != 0) {
        Client = other.Client;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FestivalID = input.ReadInt32();
            break;
          }
          case 16: {
            Seats = input.ReadInt64();
            break;
          }
          case 26: {
            Client = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FestivalID = input.ReadInt32();
            break;
          }
          case 16: {
            Seats = input.ReadInt64();
            break;
          }
          case 26: {
            Client = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Request : pb::IMessage<Request>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuffprotocol.FestivalProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      type_ = other.type_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      festivals_ = other.festivals_.Clone();
      date_ = other.date_;
      ticket_ = other.ticket_ != null ? other.ticket_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protobuffprotocol.Request.Types.Type type_ = global::Protobuffprotocol.Request.Types.Type.Unkown;
    /// <summary>
    /// Identifies which request is filled in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuffprotocol.Request.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::Protobuffprotocol.Account user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuffprotocol.Account User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "festivals" field.</summary>
    public const int FestivalsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protobuffprotocol.FestivalDTO> _repeated_festivals_codec
        = pb::FieldCodec.ForMessage(26, global::Protobuffprotocol.FestivalDTO.Parser);
    private readonly pbc::RepeatedField<global::Protobuffprotocol.FestivalDTO> festivals_ = new pbc::RepeatedField<global::Protobuffprotocol.FestivalDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuffprotocol.FestivalDTO> Festivals {
      get { return festivals_; }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 4;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 5;
    private global::Protobuffprotocol.TicketDTO ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuffprotocol.TicketDTO Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(User, other.User)) return false;
      if(!festivals_.Equals(other.festivals_)) return false;
      if (Date != other.Date) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Protobuffprotocol.Request.Types.Type.Unkown) hash ^= Type.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      hash ^= festivals_.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (ticket_ != null) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Protobuffprotocol.Request.Types.Type.Unkown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      festivals_.WriteTo(output, _repeated_festivals_codec);
      if (Date.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Date);
      }
      if (ticket_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Protobuffprotocol.Request.Types.Type.Unkown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      festivals_.WriteTo(ref output, _repeated_festivals_codec);
      if (Date.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Date);
      }
      if (ticket_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Protobuffprotocol.Request.Types.Type.Unkown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      size += festivals_.CalculateSize(_repeated_festivals_codec);
      if (Date.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (ticket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Protobuffprotocol.Request.Types.Type.Unkown) {
        Type = other.Type;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::Protobuffprotocol.Account();
        }
        User.MergeFrom(other.User);
      }
      festivals_.Add(other.festivals_);
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.ticket_ != null) {
        if (ticket_ == null) {
          Ticket = new global::Protobuffprotocol.TicketDTO();
        }
        Ticket.MergeFrom(other.Ticket);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Protobuffprotocol.Request.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::Protobuffprotocol.Account();
            }
            input.ReadMessage(User);
            break;
          }
          case 26: {
            festivals_.AddEntriesFrom(input, _repeated_festivals_codec);
            break;
          }
          case 34: {
            Date = input.ReadString();
            break;
          }
          case 42: {
            if (ticket_ == null) {
              Ticket = new global::Protobuffprotocol.TicketDTO();
            }
            input.ReadMessage(Ticket);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Protobuffprotocol.Request.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::Protobuffprotocol.Account();
            }
            input.ReadMessage(User);
            break;
          }
          case 26: {
            festivals_.AddEntriesFrom(ref input, _repeated_festivals_codec);
            break;
          }
          case 34: {
            Date = input.ReadString();
            break;
          }
          case 42: {
            if (ticket_ == null) {
              Ticket = new global::Protobuffprotocol.TicketDTO();
            }
            input.ReadMessage(Ticket);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Request message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unkown")] Unkown = 0,
        [pbr::OriginalName("Login")] Login = 1,
        [pbr::OriginalName("Logout")] Logout = 2,
        [pbr::OriginalName("SearchByDate")] SearchByDate = 3,
        [pbr::OriginalName("SellTicket")] SellTicket = 4,
      }

    }
    #endregion

  }

  public sealed partial class Response : pb::IMessage<Response>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuffprotocol.FestivalProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      type_ = other.type_;
      error_ = other.error_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      festivals_ = other.festivals_.Clone();
      ticket_ = other.ticket_ != null ? other.ticket_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protobuffprotocol.Response.Types.Type type_ = global::Protobuffprotocol.Response.Types.Type.Unkown;
    /// <summary>
    /// Identifies which request is filled in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuffprotocol.Response.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 3;
    private global::Protobuffprotocol.Account user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuffprotocol.Account User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "festivals" field.</summary>
    public const int FestivalsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protobuffprotocol.FestivalDTO> _repeated_festivals_codec
        = pb::FieldCodec.ForMessage(34, global::Protobuffprotocol.FestivalDTO.Parser);
    private readonly pbc::RepeatedField<global::Protobuffprotocol.FestivalDTO> festivals_ = new pbc::RepeatedField<global::Protobuffprotocol.FestivalDTO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuffprotocol.FestivalDTO> Festivals {
      get { return festivals_; }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 5;
    private global::Protobuffprotocol.TicketDTO ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuffprotocol.TicketDTO Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Error != other.Error) return false;
      if (!object.Equals(User, other.User)) return false;
      if(!festivals_.Equals(other.festivals_)) return false;
      if (!object.Equals(Ticket, other.Ticket)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Protobuffprotocol.Response.Types.Type.Unkown) hash ^= Type.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      hash ^= festivals_.GetHashCode();
      if (ticket_ != null) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Protobuffprotocol.Response.Types.Type.Unkown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (user_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(User);
      }
      festivals_.WriteTo(output, _repeated_festivals_codec);
      if (ticket_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Protobuffprotocol.Response.Types.Type.Unkown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (user_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(User);
      }
      festivals_.WriteTo(ref output, _repeated_festivals_codec);
      if (ticket_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Protobuffprotocol.Response.Types.Type.Unkown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      size += festivals_.CalculateSize(_repeated_festivals_codec);
      if (ticket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Protobuffprotocol.Response.Types.Type.Unkown) {
        Type = other.Type;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::Protobuffprotocol.Account();
        }
        User.MergeFrom(other.User);
      }
      festivals_.Add(other.festivals_);
      if (other.ticket_ != null) {
        if (ticket_ == null) {
          Ticket = new global::Protobuffprotocol.TicketDTO();
        }
        Ticket.MergeFrom(other.Ticket);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Protobuffprotocol.Response.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
          case 26: {
            if (user_ == null) {
              User = new global::Protobuffprotocol.Account();
            }
            input.ReadMessage(User);
            break;
          }
          case 34: {
            festivals_.AddEntriesFrom(input, _repeated_festivals_codec);
            break;
          }
          case 42: {
            if (ticket_ == null) {
              Ticket = new global::Protobuffprotocol.TicketDTO();
            }
            input.ReadMessage(Ticket);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Protobuffprotocol.Response.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
          case 26: {
            if (user_ == null) {
              User = new global::Protobuffprotocol.Account();
            }
            input.ReadMessage(User);
            break;
          }
          case 34: {
            festivals_.AddEntriesFrom(ref input, _repeated_festivals_codec);
            break;
          }
          case 42: {
            if (ticket_ == null) {
              Ticket = new global::Protobuffprotocol.TicketDTO();
            }
            input.ReadMessage(Ticket);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Response message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unkown")] Unkown = 0,
        [pbr::OriginalName("Login")] Login = 1,
        [pbr::OriginalName("Logout")] Logout = 2,
        [pbr::OriginalName("SearchByDate")] SearchByDate = 3,
        [pbr::OriginalName("SellTicket")] SellTicket = 4,
        [pbr::OriginalName("Ok")] Ok = 5,
        [pbr::OriginalName("Error")] Error = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
